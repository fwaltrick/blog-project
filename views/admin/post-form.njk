{% extends "admin/_admin-layout.njk" %}

{% block title %}
  {% if isEdit %}Edit Post{% else %}Create New Post{% endif %}
  - Admin Panel
{% endblock %}

{% block header %}
  <div class="flex items-center justify-between">
    <h1 class="text-2xl font-sans font-semibold text-dark">
      {% if isEdit %}Edit Post{% else %}Create New Post{% endif %}
    </h1>
    <a
      href="/admin/posts"
      class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-secondary bg-white hover:bg-gray-50 transition-colors"
    >
      <i class="fas fa-chevron-left text-sm mr-2"></i>
      Back to Posts
    </a>
  </div>
{% endblock %}

{% block content %}
  <div class="max-w-4xl mx-auto">
    <div class="bg-white shadow rounded-lg">
      <form
        id="postForm"
        class="p-6 space-y-6"
        data-is-edit="{% if isEdit %}true{% else %}false{% endif %}"
        data-post-id="{% if isEdit %}{{ id }}{% else %}{% endif %}"
      >
        <!-- Title -->
        <div>
          <label for="title" class="block text-sm font-medium text-dark"
            >Title</label
          >
          <input
            type="text"
            id="title"
            name="title"
            value="{{ post.title }}"
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <!-- Author -->
        <div>
          <label for="author" class="block text-sm font-medium text-gray-700"
            >Author</label
          >
          <input
            type="text"
            id="author"
            name="author"
            value="{{ post.author if post else '' }}"
            required
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <!-- Teaser -->
        <div>
          <label for="teaser" class="block text-sm font-medium text-gray-700"
            >Teaser</label
          >
          <textarea
            id="teaser"
            name="teaser"
            rows="3"
            required
            placeholder="Brief description of the post..."
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
{{ post.teaser if post else '' }}</textarea
          >
        </div>

        <!-- Content -->
        <div>
          <label for="content" class="block text-sm font-medium text-gray-700"
            >Content</label
          >

          <!-- Quill Editor -->
          <div
            id="quill-editor"
            class="mt-1 bg-white border border-gray-300 rounded-md shadow-sm"
            style="min-height: 300px;"
          ></div>

          <!-- Hidden textarea for form submission -->
          <textarea
            id="content"
            name="content"
            rows="12"
            style="display: none;"
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          >
{{ post.content if post else '' }}</textarea
          >
        </div>

        <!-- Image Filename -->
        <div>
          <label for="image" class="block text-sm font-medium text-gray-700"
            >Image Filename</label
          >
          <input
            type="text"
            id="image"
            name="image"
            value="{{ post.image if post else '' }}"
            placeholder="example.jpg"
            class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500"
          />
          <p class="mt-1 text-sm text-gray-600">
            Enter just the filename (e.g. "example.jpg"). Images should be
            placed in the /public/images/ folder.
          </p>

          <!-- Image Preview -->
          <div id="image-preview" style="display: none;" class="mt-3">
            <p class="text-sm font-medium text-gray-700 mb-2">Preview:</p>
            <img
              id="preview-img"
              alt="Image preview"
              class="max-w-xs max-h-48 rounded border"
            />
          </div>
        </div>

        <!-- Created At -->
        {% if isEdit and post.createdAt %}
        <input
          type="hidden"
          name="createdAt"
          value="{{ post.createdAt }}"
        />
        {% endif %}

        <!-- Submit Button -->
        <div class="flex items-center justify-end space-x-4">
          <a
            href="/admin"
            class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-secondary bg-white hover:bg-gray-50 transition-colors"
          >
            Cancel
          </a>
          <button
            type="submit"
            class="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-primary hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary transition-colors"
          >
            {% if isEdit %}
              <i class="fas fa-pencil-alt text-sm mr-2"></i>
              Update Post
            {% else %}
              <i class="fas fa-plus text-sm mr-2"></i>
              Create Post
            {% endif %}
          </button>
        </div>
      </form>
    </div>
  </div>

  <script>
    // Wait for DOM to load and Quill to be available
    document.addEventListener("DOMContentLoaded", function () {
      console.log("DOM loaded");

      // Check if Quill is available
      if (typeof Quill === "undefined") {
        console.error("Quill is not loaded");
        // Fallback: show normal textarea
        document.getElementById("content").style.display = "block";
        document.getElementById("quill-editor").style.display = "none";
        return;
      }

      console.log("Quill is available, initializing...");

      try {
        // Initialize Quill Editor
        const quill = new Quill("#quill-editor", {
          theme: "snow",
          modules: {
            toolbar: [
              [{ header: [1, 2, 3, false] }],
              ["bold", "italic", "underline", "strike"],
              [{ color: [] }, { background: [] }],
              [{ list: "ordered" }, { list: "bullet" }],
              [{ indent: "-1" }, { indent: "+1" }],
              ["link", "blockquote", "code-block"],
              [{ align: [] }],
              ["clean"],
            ],
          },
        });

        console.log("Quill initialized successfully");

        // Load initial content into editor
        const contentTextarea = document.getElementById("content");
        if (contentTextarea.value.trim()) {
          console.log("Loading initial content");
          quill.root.innerHTML = contentTextarea.value;
        }

        // Sync Quill with textarea when content changes
        quill.on("text-change", function () {
          contentTextarea.value = quill.root.innerHTML;
        });

        // Image preview
        const imageInput = document.getElementById("image");
        const previewContainer = document.getElementById("image-preview");
        const previewImg = document.getElementById("preview-img");

        const updateImagePreview = () => {
          const filename = imageInput.value.trim();

          if (filename) {
            const imgSrc = `/images/${filename}`;

            // Create a new image to test if it exists
            const testImg = new Image();
            testImg.onload = function () {
              // If image loaded successfully, show preview
              previewImg.src = imgSrc;
              previewContainer.style.display = "block";
            };
            testImg.onerror = function () {
              // If image didn't load, hide preview
              previewContainer.style.display = "none";
            };
            testImg.src = imgSrc;
          } else {
            previewContainer.style.display = "none";
          }
        };

        // Show initial preview if editing
        if (imageInput.value.trim()) {
          updateImagePreview();
        }

        imageInput.addEventListener("input", updateImagePreview);

        // Form submission
        document
          .getElementById("postForm")
          .addEventListener("submit", function (e) {
            e.preventDefault();

            // Sync Quill content with textarea before submission
            contentTextarea.value = quill.root.innerHTML;

            const form = e.target;
            const formData = new FormData(form);
            const data = Object.fromEntries(formData);

            // Get data from HTML attributes
            const isEdit = form.getAttribute("data-is-edit") === "true";
            const postId = form.getAttribute("data-post-id");

            if (isEdit) {
              // Update existing post with PATCH
              fetch(`/admin/posts/${postId}`, {
                method: "PATCH",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
                body: JSON.stringify(data),
              })
                .then(async (response) => {
                  const data = await response.json();
                  if (response.ok) {
                    // Show success message and redirect
                    console.log(data.message);
                    window.location.href = "/admin/posts";
                  } else {
                    alert(data.message || "Error updating post. Please try again.");
                  }
                })
                .catch((error) => {
                  console.error("Error:", error);
                  alert("Error updating post. Please try again.");
                });
            } else {
              // Create new post with POST
              fetch("/admin/posts", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Accept: "application/json",
                },
                body: JSON.stringify(data),
              })
                .then(async (response) => {
                  const data = await response.json();
                  if (response.ok) {
                    // Show success message and redirect
                    console.log(data.message);
                    window.location.href = "/admin/posts";
                  } else {
                    alert(data.message || "Error creating post. Please try again.");
                  }
                })
                .catch((error) => {
                  console.error("Error:", error);
                  alert("Error creating post. Please try again.");
                });
            }
          });
      } catch (error) {
        console.error("Error initializing Quill:", error);
        // Fallback: show normal textarea
        document.getElementById("content").style.display = "block";
        document.getElementById("quill-editor").style.display = "none";
      }
    }); // End of DOMContentLoaded
  </script>
{% endblock %}
